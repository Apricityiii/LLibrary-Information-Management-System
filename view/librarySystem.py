# Form implementation generated from reading ui file 'librarySystem.ui'
#
# Created by: PyQt5 UI code generator 6.5.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from common.config import AUTHOR

from PyQt5 import QtCore, QtGui, QtWidgets

import mysql.connector as mc
from PyQt5.QtWidgets import QMessageBox, QFileDialog

from .adminInfo import get_admin_account, get_admin_password, log_status


# from ..resource import resource_rc


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        font = QtGui.QFont()
        font.setFamily("华文中宋")
        font.setPointSize(12)
        MainWindow.setFont(font)
        MainWindow.setDocumentMode(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.TextElideMode.ElideLeft)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.horizontalWidget = QtWidgets.QWidget(parent=self.tab)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(16)
        self.horizontalWidget.setFont(font)
        self.horizontalWidget.setStyleSheet("QWidget {\n"
                                            "     border:2px solid rgb(0,0,0);\n"
                                            "}")
        self.horizontalWidget.setObjectName("horizontalWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalWidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.lineEdit_bookID = QtWidgets.QLineEdit(parent=self.horizontalWidget)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(16)
        self.lineEdit_bookID.setFont(font)
        self.lineEdit_bookID.setObjectName("lineEdit_bookID")
        self.horizontalLayout_2.addWidget(self.lineEdit_bookID)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                           QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_bookName = QtWidgets.QLabel(parent=self.horizontalWidget)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(12)
        self.label_bookName.setFont(font)
        self.label_bookName.setObjectName("label_bookName")
        self.verticalLayout_6.addWidget(self.label_bookName)
        self.label_bookAuthor = QtWidgets.QLabel(parent=self.horizontalWidget)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(12)
        self.label_bookAuthor.setFont(font)
        self.label_bookAuthor.setObjectName("label_bookAuthor")
        self.verticalLayout_6.addWidget(self.label_bookAuthor)
        self.horizontalLayout_2.addLayout(self.verticalLayout_6)
        self.verticalLayout_9.addWidget(self.horizontalWidget)
        self.horizontalWidget_2 = QtWidgets.QWidget(parent=self.tab)
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI")
        font.setPointSize(16)
        self.horizontalWidget_2.setFont(font)
        self.horizontalWidget_2.setStyleSheet("QWidget {\n"
                                              "     border:2px solid rgb(0,0,0);\n"
                                              "}")
        self.horizontalWidget_2.setObjectName("horizontalWidget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalWidget_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.lineEdit_accountID = QtWidgets.QLineEdit(parent=self.horizontalWidget_2)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.lineEdit_accountID.setFont(font)
        self.lineEdit_accountID.setObjectName("lineEdit_accountID")
        self.horizontalLayout_3.addWidget(self.lineEdit_accountID)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_accountName = QtWidgets.QLabel(parent=self.horizontalWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_accountName.setFont(font)
        self.label_accountName.setObjectName("label_accountName")
        self.verticalLayout_7.addWidget(self.label_accountName)
        self.label_accountInfo = QtWidgets.QLabel(parent=self.horizontalWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_accountInfo.setFont(font)
        self.label_accountInfo.setObjectName("label_accountInfo")
        self.verticalLayout_7.addWidget(self.label_accountInfo)
        self.horizontalLayout_3.addLayout(self.verticalLayout_7)
        self.verticalLayout_9.addWidget(self.horizontalWidget_2)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                            QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_9.addItem(spacerItem2)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.toolButton_issue = QtWidgets.QToolButton(parent=self.tab)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/gallery/images/error.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_issue.setIcon(icon)
        self.toolButton_issue.setIconSize(QtCore.QSize(50, 50))
        self.toolButton_issue.setObjectName("toolButton_issue")
        self.horizontalLayout_4.addWidget(self.toolButton_issue)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem4)
        self.verticalLayout_8.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem5)
        self.label = QtWidgets.QLabel(parent=self.tab)
        self.label.setObjectName("label")
        self.horizontalLayout_5.addWidget(self.label)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem6)
        self.verticalLayout_8.addLayout(self.horizontalLayout_5)
        self.verticalLayout_9.addLayout(self.verticalLayout_8)
        self.verticalLayout_13.addLayout(self.verticalLayout_9)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.tab_2)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.lineEdit_submission = QtWidgets.QLineEdit(parent=self.tab_2)
        self.lineEdit_submission.setObjectName("lineEdit_submission")
        self.verticalLayout_12.addWidget(self.lineEdit_submission)
        self.tableWidget = QtWidgets.QTableWidget(parent=self.tab_2)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(165)
        self.verticalLayout_12.addWidget(self.tableWidget)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_10.addItem(spacerItem7)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem8)
        self.toolButton_renew = QtWidgets.QToolButton(parent=self.tab_2)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/gallery/images/update.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_renew.setIcon(icon1)
        self.toolButton_renew.setIconSize(QtCore.QSize(50, 50))
        self.toolButton_renew.setObjectName("toolButton_renew")
        self.horizontalLayout_7.addWidget(self.toolButton_renew)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                            QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem9)
        self.verticalLayout_10.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem10)
        self.label_renew = QtWidgets.QLabel(parent=self.tab_2)
        self.label_renew.setObjectName("label_renew")
        self.horizontalLayout_6.addWidget(self.label_renew)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem11)
        self.verticalLayout_10.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_10.addLayout(self.verticalLayout_10)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem12)
        self.toolButton_submit = QtWidgets.QToolButton(parent=self.tab_2)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/gallery/images/submit.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_submit.setIcon(icon2)
        self.toolButton_submit.setIconSize(QtCore.QSize(50, 50))
        self.toolButton_submit.setObjectName("toolButton_submit")
        self.horizontalLayout_8.addWidget(self.toolButton_submit)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem13)
        self.verticalLayout_11.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem14)
        self.label_submit = QtWidgets.QLabel(parent=self.tab_2)
        self.label_submit.setObjectName("label_submit")
        self.horizontalLayout_9.addWidget(self.label_submit)
        spacerItem15 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem15)
        self.verticalLayout_11.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_10.addLayout(self.verticalLayout_11)
        spacerItem16 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding,
                                             QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_10.addItem(spacerItem16)
        self.verticalLayout_12.addLayout(self.horizontalLayout_10)
        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout.addWidget(self.tabWidget)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem17 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout.addItem(spacerItem17)
        self.toolButton_addBook = QtWidgets.QToolButton(parent=self.centralwidget)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/gallery/images/add.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_addBook.setIcon(icon3)
        self.toolButton_addBook.setIconSize(QtCore.QSize(68, 68))
        self.toolButton_addBook.setObjectName("toolButton_addBook")
        self.verticalLayout.addWidget(self.toolButton_addBook)
        self.label_addBook = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_addBook.setObjectName("label_addBook")
        self.verticalLayout.addWidget(self.label_addBook)
        spacerItem18 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout.addItem(spacerItem18)
        self.verticalLayout_5.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.toolButton_addAccount = QtWidgets.QToolButton(parent=self.centralwidget)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/gallery/images/account.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_addAccount.setIcon(icon4)
        self.toolButton_addAccount.setIconSize(QtCore.QSize(68, 68))
        self.toolButton_addAccount.setObjectName("toolButton_addAccount")
        self.verticalLayout_2.addWidget(self.toolButton_addAccount)
        self.label_addAccount = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_addAccount.setObjectName("label_addAccount")
        self.verticalLayout_2.addWidget(self.label_addAccount)
        self.verticalLayout_5.addLayout(self.verticalLayout_2)
        spacerItem19 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_5.addItem(spacerItem19)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.toolButton_viewBooks = QtWidgets.QToolButton(parent=self.centralwidget)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/gallery/images/book.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_viewBooks.setIcon(icon5)
        self.toolButton_viewBooks.setIconSize(QtCore.QSize(68, 68))
        self.toolButton_viewBooks.setObjectName("toolButton_viewBooks")
        self.verticalLayout_3.addWidget(self.toolButton_viewBooks)
        self.label_viewBook = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_viewBook.setObjectName("label_viewBook")
        self.verticalLayout_3.addWidget(self.label_viewBook)
        spacerItem20 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum,
                                             QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_3.addItem(spacerItem20)
        self.verticalLayout_5.addLayout(self.verticalLayout_3)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.toolButton_viewAccount = QtWidgets.QToolButton(parent=self.centralwidget)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/gallery/images/view.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_viewAccount.setIcon(icon6)
        self.toolButton_viewAccount.setIconSize(QtCore.QSize(68, 68))
        self.toolButton_viewAccount.setObjectName("toolButton_viewAccount")
        self.verticalLayout_4.addWidget(self.toolButton_viewAccount)
        self.label_viewAccount = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_viewAccount.setObjectName("label_viewAccount")
        self.verticalLayout_4.addWidget(self.label_viewAccount)
        self.verticalLayout_5.addLayout(self.verticalLayout_4)
        self.horizontalLayout.addLayout(self.verticalLayout_5)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        self.menuBar.setObjectName("menuBar")
        self.menuFiles = QtWidgets.QMenu(parent=self.menuBar)
        self.menuFiles.setObjectName("menuFiles")
        self.menuAbout = QtWidgets.QMenu(parent=self.menuBar)
        self.menuAbout.setObjectName("menuAbout")
        MainWindow.setMenuBar(self.menuBar)
        self.action_login_db = QtWidgets.QAction(parent=MainWindow)
        self.action_login_db.setObjectName("action_login_db")
        self.action_logout_db = QtWidgets.QAction(parent=MainWindow)
        self.action_logout_db.setObjectName("action_logout_db")
        self.action_exit = QtWidgets.QAction(parent=MainWindow)
        self.action_exit.setObjectName("action_exit")
        self.action_about = QtWidgets.QAction(parent=MainWindow)
        self.action_about.setObjectName("action_about")
        self.action_initDB = QtWidgets.QAction(parent=MainWindow)
        self.action_initDB.setObjectName("action_initDB")
        self.action_importDB = QtWidgets.QAction(parent=MainWindow)
        self.action_importDB.setObjectName("action_importDB")
        self.action_exportDB = QtWidgets.QAction(parent=MainWindow)
        self.action_exportDB.setObjectName("action_exportDB")
        self.action_help = QtWidgets.QAction(parent=MainWindow)
        self.action_help.setObjectName("action_help")
        self.menuFiles.addAction(self.action_login_db)
        self.menuFiles.addAction(self.action_logout_db)
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.action_exit)
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.action_initDB)
        self.menuFiles.addAction(self.action_importDB)
        self.menuFiles.addAction(self.action_exportDB)
        self.menuAbout.addAction(self.action_about)
        self.menuAbout.addSeparator()
        self.menuAbout.addAction(self.action_help)
        self.menuBar.addAction(self.menuFiles.menuAction())
        self.menuBar.addAction(self.menuAbout.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", '图书馆管理系统 --{}'.format(AUTHOR)))
        self.tabWidget.setToolTip(_translate("MainWindow", "<html><head/><body><p>借阅</p></body></html>"))
        self.lineEdit_bookID.setPlaceholderText(_translate("MainWindow", "请输入书籍编号"))
        self.label_bookName.setText(_translate("MainWindow", "书籍名称"))
        self.label_bookAuthor.setText(_translate("MainWindow", "书籍作者"))
        self.lineEdit_accountID.setPlaceholderText(_translate("MainWindow", "请输入账号"))
        self.label_accountName.setText(_translate("MainWindow", "账号名称"))
        self.label_accountInfo.setText(_translate("MainWindow", "账号信息"))
        self.toolButton_issue.setText(_translate("MainWindow", "借阅"))
        self.label.setText(_translate("MainWindow", "借阅书籍"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "借阅"))
        self.lineEdit_submission.setPlaceholderText(_translate("MainWindow", "请输入书籍编码或账户账号"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "书籍编号"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "账户账号"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "上报时间"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "续订次数"))
        self.toolButton_renew.setText(_translate("MainWindow", "续订"))
        self.label_renew.setText(_translate("MainWindow", "续订"))
        self.toolButton_submit.setText(_translate("MainWindow", "归还"))
        self.label_submit.setText(_translate("MainWindow", "归还"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "续订/归还"))
        self.toolButton_addBook.setText(_translate("MainWindow", "添加书籍"))
        self.label_addBook.setText(_translate("MainWindow", "添加书籍"))
        self.toolButton_addAccount.setText(_translate("MainWindow", "添加账户"))
        self.label_addAccount.setText(_translate("MainWindow", "添加账户"))
        self.toolButton_viewBooks.setText(_translate("MainWindow", "查看书籍"))
        self.label_viewBook.setText(_translate("MainWindow", "查看书籍"))
        self.toolButton_viewAccount.setText(_translate("MainWindow", "查看账户"))
        self.label_viewAccount.setText(_translate("MainWindow", "查看账户"))
        self.menuFiles.setTitle(_translate("MainWindow", "文件"))
        self.menuAbout.setTitle(_translate("MainWindow", "关于"))
        self.action_login_db.setText(_translate("MainWindow", "登录数据库"))
        self.action_logout_db.setText(_translate("MainWindow", "登出数据库"))
        self.action_exit.setText(_translate("MainWindow", "退出程序"))
        self.action_exit.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.action_about.setText(_translate("MainWindow", "关于应用"))
        self.action_initDB.setText(_translate("MainWindow", "数据库初始化"))
        self.action_importDB.setText(_translate("MainWindow", "导入数据"))
        self.action_exportDB.setText(_translate("MainWindow", "导出数据"))
        self.action_help.setText(_translate("MainWindow", "帮助"))
        self.action_help.setShortcut(_translate("MainWindow", "F1"))

        self.lineEdit_bookID.returnPressed.connect(self.book_id)
        self.lineEdit_accountID.returnPressed.connect(self.account_id)
        self.toolButton_issue.clicked.connect(self.issue_book)
        self.lineEdit_submission.returnPressed.connect(self.load_issue)
        self.toolButton_submit.clicked.connect(self.submit_book)
        self.toolButton_renew.clicked.connect(self.renew_book)
        # self.action_importDB.triggered.connect(self.import_database)
        # self.action_exportDB.triggered.connect(self.export_database)

    def book_id(self):
        if log_status() is False:
            print("请先登录！")
            QMessageBox.critical(self.toolButton_issue, "错误", "请先登录！")
            return
        book_id = self.lineEdit_bookID.text()
        if book_id == "":
            QMessageBox.critical(self.toolButton_issue, "错误", "请输入书籍编号！")
            return

        dbname = "library"
        tablename = "tbl_addbook"

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="library"
            )

            mycursor = mydatabase.cursor()
            sql = "SELECT * FROM {} WHERE bookid = '{}'".format(tablename, book_id)
            mycursor.execute(sql)
            myresult = mycursor.fetchall()
            if myresult == []:
                QMessageBox.critical(self.toolButton_issue, "错误", "书籍不存在！")
                return
            for x in myresult:
                self.label_bookName.setText("书籍名称：⟪" + x[0] + "⟫，  状态：" + str(x[4]))
                self.label_bookAuthor.setText("书籍作者：" + x[2] + "，  出版社：" + x[3])


        except mc.Error as e:
            print("错误", e)
            QMessageBox.critical(self.toolButton_issue, "错误",
                                 "数据库连接失败或错误语句，请检查数据库是否正确或查找是否存在！" + str(e))

    def account_id(self):
        if log_status() is False:
            print("请先登录！")
            QMessageBox.critical(self.toolButton_issue, "错误", "请先登录！")
            return
        account_id = self.lineEdit_accountID.text()
        if account_id == "":
            QMessageBox.critical(self.toolButton_issue, "错误", "请输入账号！")
            return

        dbname = "library"
        tablename = "tbl_addaccount"

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="library"
            )

            mycursor = mydatabase.cursor()
            sql = "SELECT * FROM {} WHERE accountid = '{}'".format(tablename, account_id)
            mycursor.execute(sql)
            myresult = mycursor.fetchall()
            if myresult == []:
                QMessageBox.critical(self.toolButton_issue, "错误", "账号不存在！")
                return
            for x in myresult:
                self.label_accountName.setText("账号名称：" + x[0] + "，  状态：" + str(x[4]))
                self.label_accountInfo.setText("电话号码：" + x[2] + "，  邮箱：" + x[3])

        except mc.Error as e:
            print("错误", e)
            QMessageBox.critical(self.toolButton_issue, "错误",
                                 "数据库连接失败或错误语句，请检查数据库是否正确或查找是否存在！" + str(e))

    def issue_book(self):
        if log_status() is False:
            print("请先登录！")
            QMessageBox.critical(self.toolButton_issue, "错误", "请先登录！")
            return
        book_id = self.lineEdit_bookID.text()
        account_id = self.lineEdit_accountID.text()
        if book_id == "" or account_id == "":
            QMessageBox.critical(self.toolButton_issue, "错误", "请输入书籍编号和账号！")
            return

        dbname = "library"
        tablename = "tbl_issue"
        book_table = "tbl_addbook"
        account_table = "tbl_addaccount"

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="library"
            )

            mycursor = mydatabase.cursor()
            # 书籍编号和账号是否存在
            sql1 = "SELECT * FROM {} WHERE bookid = '{}'".format(book_table, book_id)
            mycursor.execute(sql1)
            myresult1 = mycursor.fetchall()
            if myresult1 == []:
                QMessageBox.critical(self.toolButton_issue, "错误", "书籍不存在！")
                return
            sql2 = "SELECT * FROM {} WHERE accountid = '{}'".format(account_table, account_id)
            mycursor.execute(sql2)
            myresult2 = mycursor.fetchall()
            if myresult2 == []:
                QMessageBox.critical(self.toolButton_issue, "错误", "账号不存在！")
                return
            # 书籍是否已被借出
            sql3 = "SELECT * FROM {} WHERE book_id = '{}'".format(tablename, book_id)
            mycursor.execute(sql3)
            myresult3 = mycursor.fetchall()
            if myresult3 != []:
                QMessageBox.critical(self.toolButton_issue, "错误", "书籍已被借出！")
                return

            sql4 = "INSERT INTO {} (book_id, account_id) VALUES (%s, %s)".format(tablename)
            val4 = (book_id, account_id)
            # tbl_addbook 中 isAvail 为 0 时表示书籍已被借出
            sql5 = "UPDATE {} SET isAvail = 0 WHERE bookid = '{}'".format(book_table, book_id)

            mycursor.execute(sql4, val4)
            mycursor.execute(sql5)

            # 更新 tablename 中的 issueTime 时间戳
            sql6 = "UPDATE {} SET issueTime = CURRENT_TIMESTAMP WHERE book_id = '{}'".format(tablename, book_id)
            mycursor.execute(sql6)

            mydatabase.commit()
            QMessageBox.information(self.toolButton_issue, "成功", "书籍已成功借出！")

        except mc.Error as e:
            print("错误", e)
            QMessageBox.critical(self.toolButton_issue, "错误",
                                 "数据库连接失败或错误语句，请检查数据库是否正确或查找是否存在！" + str(e))

    def load_issue(self):
        if log_status() is False:
            print("请先登录！")
            QMessageBox.critical(self.toolButton_issue, "错误", "请先登录！")
            return
        issue_id = self.lineEdit_submission.text()
        if issue_id == "":
            QMessageBox.critical(self.toolButton_issue, "错误", "请输入书籍编号或账号！")
            return

        dbname = "library"
        tablename = "tbl_issue"

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="library"
            )

            mycursor = mydatabase.cursor()
            # 先判断 issue_id 是 book_id 还是 account_id
            sql0 = "SELECT * FROM {} WHERE book_id = '{}'".format(tablename, issue_id)
            mycursor.execute(sql0)
            myresult0 = mycursor.fetchall()
            if myresult0 == []:
                sql1 = "SELECT * FROM {} WHERE account_id = '{}'".format(tablename, issue_id)
                mycursor.execute(sql1)
                myresult1 = mycursor.fetchall()
                if myresult1 == []:
                    QMessageBox.critical(self.toolButton_issue, "错误", "书籍或账号不存在！")
                    return
            # issue_id 可以是 book_id 也可以是 account_id
            sql3 = "SELECT * FROM {} WHERE book_id = '{}' OR account_id = '{}'".format(tablename, issue_id, issue_id)
            mycursor.execute(sql3)
            myresult = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(myresult):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))

        except mc.Error as e:
            print("错误", e)
            QMessageBox.critical(self.toolButton_issue, "错误",
                                 "数据库连接失败或错误语句，请检查数据库是否正确或查找是否存在！" + str(e))

    def submit_book(self):
        if log_status() is False:
            print("请先登录！")
            QMessageBox.critical(self.toolButton_issue, "错误", "请先登录！")
            return
        issue_id = self.lineEdit_submission.text()
        if issue_id == "":
            QMessageBox.critical(self.toolButton_issue, "错误", "请输入书籍编号或账号！")
            return

        dbname = "library"
        tablename = "tbl_issue"
        book_table = "tbl_addbook"

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="{}".format(dbname)
            )

            mycursor = mydatabase.cursor()
            # 先判断 issue_id 是 book_id 还是 account_id
            sql0 = "SELECT * FROM {} WHERE book_id = '{}'".format(tablename, issue_id)
            mycursor.execute(sql0)
            myresult0 = mycursor.fetchall()
            if myresult0 == []:
                sql1 = "SELECT * FROM {} WHERE account_id = '{}'".format(tablename, issue_id)
                mycursor.execute(sql1)
                myresult1 = mycursor.fetchall()
                if myresult1 == []:
                    QMessageBox.critical(self.toolButton_issue, "错误", "书籍或账号不存在！")
                    return
            # 显示结果，此时 issue_id 可以是 book_id 也可以是 account_id
            sql3 = "SELECT * FROM {} WHERE book_id = '{}' OR account_id = '{}'".format(tablename, issue_id, issue_id)
            mycursor.execute(sql3)
            myresult3 = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(myresult3):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            # 归还书籍，此时 issue_id 只能是 book_id, 且只有一本书,如果是 account_id 则不归还，只显示结果，并提示
            sql4 = "DELETE FROM {} WHERE book_id = '{}'".format(tablename, issue_id)
            mycursor.execute(sql4)
            # tbl_addbook 中 isAvail 为 1 时表示书籍可借
            sql5 = "UPDATE {} SET isAvail = 1 WHERE bookid = '{}'".format(book_table, issue_id)
            # 执行
            mycursor.execute(sql4)
            mycursor.execute(sql5)
            mydatabase.commit()
            # 如果 issue_id 是 account_id 则不归还，只显示结果，并提示你只是查看了账号的借阅记录
            if myresult0 == []:
                QMessageBox.information(self.toolButton_issue, "注意", "你只是查看了账号的借阅记录！")
            else:
                QMessageBox.information(self.toolButton_issue, "成功", "书籍已成功归还！")
            # 刷新显示，即重新显示结果
            # 重新执行 sql3
            mycursor.execute(sql3)
            myresult3 = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(myresult3):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))

        except mc.Error as e:
            print("错误", e)
            QMessageBox.critical(self.toolButton_issue, "错误",
                                 "数据库连接失败或错误语句，请检查数据库是否正确或查找是否存在！" + str(e))

    def renew_book(self):
        if log_status() is False:
            print("请先登录！")
            QMessageBox.critical(self.toolButton_issue, "错误", "请先登录！")
            return
        issue_id = self.lineEdit_submission.text()
        if issue_id == "":
            QMessageBox.critical(self.toolButton_issue, "错误", "请输入书籍编号或账号！")
            return

        dbname = "library"
        tablename = "tbl_issue"
        book_table = "tbl_addbook"

        try:
            admin_username = get_admin_account()
            admin_password = get_admin_password()

            mydatabase = mc.connect(
                host="localhost",
                user="{}".format(admin_username),
                password="{}".format(admin_password),
                database="{}".format(dbname)
            )

            mycursor = mydatabase.cursor()
            # 先判断 issue_id 是 book_id 还是 account_id
            sql0 = "SELECT * FROM {} WHERE book_id = '{}'".format(tablename, issue_id)
            mycursor.execute(sql0)
            myresult0 = mycursor.fetchall()
            if myresult0 == []:
                sql1 = "SELECT * FROM {} WHERE account_id = '{}'".format(tablename, issue_id)
                mycursor.execute(sql1)
                myresult1 = mycursor.fetchall()
                if myresult1 == []:
                    QMessageBox.critical(self.toolButton_issue, "错误", "书籍或账号不存在！")
                    return
            # 显示结果，此时 issue_id 可以是 book_id 也可以是 account_id
            sql3 = "SELECT * FROM {} WHERE book_id = '{}' OR account_id = '{}'".format(tablename, issue_id, issue_id)
            mycursor.execute(sql3)
            myresult3 = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(myresult3):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
            # 续订书籍，此时 issue_id 只能是 book_id, 且只有一本书,如果是 account_id 则不续订，只显示结果，并提示
            sql4 = "UPDATE {} SET renewCount = renewCount + 1 WHERE book_id = '{}'".format(tablename, issue_id)
            # 更新时间戳
            sql5 = "UPDATE {} SET issueTime = CURRENT_TIMESTAMP WHERE book_id = '{}'".format(tablename, issue_id)
            mycursor.execute(sql4)
            mycursor.execute(sql5)
            mydatabase.commit()
            # 如果 issue_id 是 account_id 则不续订，只显示结果，并提示你只是查看了账号的借阅记录
            if myresult0 == []:
                QMessageBox.information(self.toolButton_issue, "注意", "你只是查看了账号的借阅记录！")
            else:
                QMessageBox.information(self.toolButton_issue, "成功", "书籍已成功续订！")
            # 刷新显示，即重新显示结果
            # 重新执行 sql3
            mycursor.execute(sql3)
            myresult3 = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(myresult3):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))

        except mc.Error as e:
            print("错误", e)
            QMessageBox.critical(self.toolButton_issue, "错误",
                                 "数据库连接失败或错误语句，请检查数据库是否正确或查找是否存在！" + str(e))


# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec())
